plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

configurations { // 프로젝트를 빌드할 때 그래들이 설정 프로세서를 사용하도록 설정한다.
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('testcontainersVersion', "1.17.3") // 사용할 테스트컨테이너 버전을 지정한다.
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.testcontainers:postgresql' // PostgreSQL 데이터베이스에 대한 컨테이너 관리 기능을 제공한다.
    implementation 'org.flywaydb:flyway-core:9.22.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}" // 테스트컨테이너 의존성 관리를 위한 BOM
    }
}

bootRun {
    systemProperty 'spring.profiles.active', 'testdata'
}

tasks.named('test') {
	useJUnitPlatform()
}
