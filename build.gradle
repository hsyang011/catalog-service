plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

configurations { // 프로젝트를 빌드할 때 그래들이 설정 프로세서를 사용하도록 설정한다.
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('testcontainersVersion', "1.17.3") // 사용할 테스트컨테이너 버전을 지정한다.
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.testcontainers:postgresql' // PostgreSQL 데이터베이스에 대한 컨테이너 관리 기능을 제공한다.
    implementation 'org.flywaydb:flyway-core:9.22.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}" // 테스트컨테이너 의존성 관리를 위한 BOM
    }
}

bootRun {
    systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage { // 빌드팩을 사용해 OCI 이미지를 빌드하기 위한 스프링 부트 플러그인 작업
    imageName = "${project.name}" // 빌드할 OCI 이미지의 이름. 이 이름은 그래들의 프로젝트 설정에서 정의한 이름과 같다. 버전 번호를 사용하지 않고 암묵적인 latest 태그를 사용한다.
    environment = ["BP_JVM_VERSION" : "17.*"] // 이미지에 설치할 JVM 버전. 최신 버전인 자바 17을 사용한다.

    docker { // 컨테이너 저장소 연결을 설정하기 위한 섹션
        publishRegistry { // 컨테이너 저장소 인증을 설정하기 위한 섹션. 값은 그래들 속성을 통해 전달된다.
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}

tasks.named('test') {
	useJUnitPlatform()
}
